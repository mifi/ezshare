/* eslint-disable */

// @ts-nocheck

// noinspection JSUnusedGlobalSymbols

// This file was automatically generated by TanStack Router.
// You should NOT make any changes in this file as it will be overwritten.
// Additionally, you should also exclude this file from your linter and/or formatter to prevent it from being checked or modified.

import { Route as rootRouteImport } from './routes/__root'
import { Route as IndexRouteImport } from './routes/index'
import { Route as DirDirIdRouteImport } from './routes/dir/$dirId'
import { Route as DirDirIdFileRouteImport } from './routes/dir/$dirId/file'

const IndexRoute = IndexRouteImport.update({
  id: '/',
  path: '/',
  getParentRoute: () => rootRouteImport,
} as any)
const DirDirIdRoute = DirDirIdRouteImport.update({
  id: '/dir/$dirId',
  path: '/dir/$dirId',
  getParentRoute: () => rootRouteImport,
} as any)
const DirDirIdFileRoute = DirDirIdFileRouteImport.update({
  id: '/file',
  path: '/file',
  getParentRoute: () => DirDirIdRoute,
} as any)

export interface FileRoutesByFullPath {
  '/': typeof IndexRoute
  '/dir/$dirId': typeof DirDirIdRouteWithChildren
  '/dir/$dirId/file': typeof DirDirIdFileRoute
}
export interface FileRoutesByTo {
  '/': typeof IndexRoute
  '/dir/$dirId': typeof DirDirIdRouteWithChildren
  '/dir/$dirId/file': typeof DirDirIdFileRoute
}
export interface FileRoutesById {
  __root__: typeof rootRouteImport
  '/': typeof IndexRoute
  '/dir/$dirId': typeof DirDirIdRouteWithChildren
  '/dir/$dirId/file': typeof DirDirIdFileRoute
}
export interface FileRouteTypes {
  fileRoutesByFullPath: FileRoutesByFullPath
  fullPaths: '/' | '/dir/$dirId' | '/dir/$dirId/file'
  fileRoutesByTo: FileRoutesByTo
  to: '/' | '/dir/$dirId' | '/dir/$dirId/file'
  id: '__root__' | '/' | '/dir/$dirId' | '/dir/$dirId/file'
  fileRoutesById: FileRoutesById
}
export interface RootRouteChildren {
  IndexRoute: typeof IndexRoute
  DirDirIdRoute: typeof DirDirIdRouteWithChildren
}

declare module '@tanstack/react-router' {
  interface FileRoutesByPath {
    '/': {
      id: '/'
      path: '/'
      fullPath: '/'
      preLoaderRoute: typeof IndexRouteImport
      parentRoute: typeof rootRouteImport
    }
    '/dir/$dirId': {
      id: '/dir/$dirId'
      path: '/dir/$dirId'
      fullPath: '/dir/$dirId'
      preLoaderRoute: typeof DirDirIdRouteImport
      parentRoute: typeof rootRouteImport
    }
    '/dir/$dirId/file': {
      id: '/dir/$dirId/file'
      path: '/file'
      fullPath: '/dir/$dirId/file'
      preLoaderRoute: typeof DirDirIdFileRouteImport
      parentRoute: typeof DirDirIdRoute
    }
  }
}

interface DirDirIdRouteChildren {
  DirDirIdFileRoute: typeof DirDirIdFileRoute
}

const DirDirIdRouteChildren: DirDirIdRouteChildren = {
  DirDirIdFileRoute: DirDirIdFileRoute,
}

const DirDirIdRouteWithChildren = DirDirIdRoute._addFileChildren(
  DirDirIdRouteChildren,
)

const rootRouteChildren: RootRouteChildren = {
  IndexRoute: IndexRoute,
  DirDirIdRoute: DirDirIdRouteWithChildren,
}
export const routeTree = rootRouteImport
  ._addFileChildren(rootRouteChildren)
  ._addFileTypes<FileRouteTypes>()
